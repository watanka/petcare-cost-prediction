version: "3.8"

services:

  postgres:
    image: postgres:14.3
    container_name: postgres
    volumes:
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - backend
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8"
    ports:
      - 5432:5432
    hostname: postgres
    restart: always
    stdin_open: true

  mlflow:
    build:
      context: mlflow
    volumes:
      - data_storage:/opt/outputs
      
    ports:
      - 5000:5000
    networks:
      - backend
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    entrypoint: ["/bin/sh", "/entrypoint.sh"]
      
  dashboard:
    build:
      context: dashboard
    volumes:
      - data_storage:/data_storage
    ports:
      - 8501:8501
    networks:
      - backend
    command:
      - "streamlit"
      - "run"
      - "src/main.py"
    environment:
      - INSURANCE_CLAIM_FILE=${INSURANCE_CLAIM_FILE}
      - INSURANCE_CLAIM_PREDICTION_DIR=${INSURANCE_CLAIM_PREDICTION_DIR}

  pipeline:
    build:
      context: pipeline
    depends_on:
    - mlflow
    environment:
      - GUNICORN_NUM_WORKERS=${GUNICORN_NUM_WORKERS}
      - MLSERVER_URL=${MLSERVER_URL} # nginx 통해서 접근
      - MLSERVER_ENDPOINT=${MLSERVER_ENDPOINT}
      - MLFLOW_TRACKING_URL=${MLFLOW_TRACKING_URL}
      - MLFLOW_ARTIFACT_PATH=${MLFLOW_ARTIFACT_PATH}
    volumes:
      - data_storage:/data_storage
      # - data_storage/mlartifacts:/mlartifacts
    ports:
      - 8000:8000
    networks:
      - backend
    command:
      - "python"
      - "main.py"

  mlserver1:
    build:
      context: mlserver
    ports:
      - 8080:8080
      - 8081:8081
    networks:
      - backend

  mlserver2:
    build:
      context: mlserver
    ports:
      - 8082:8080
      - 8083:8081
    networks:
      - backend

  dbscheduler:  
    build:
      context: scheduler
    ports:
      - 8090:8090
    networks:
      - backend
    environment:
      - DB_URL=${DB_URL}
      - DB_PORT=${DB_PORT}
      - USER_NAME=${USER_NAME}
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - SEND_EMAIL_ADDRESS=${SEND_EMAIL_ADDRESS}
      - RECEIVE_EMAIL_ADDRESS=${RECEIVE_EMAIL_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - MODEL_SERVER_URL=${MODEL_SERVER_URL} # nginx 통해서 접근
      - RECORD_SAVE_PATH=${RECORD_SAVE_PATH}

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - mlserver1
      - mlserver2

networks:
  backend:
volumes:
  data_storage: